/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Color;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class HotelCRUD extends javax.swing.JFrame {

    /**
     * Creates new form HotelCRUD
     */
    Connection con;
    Statement st;
    public static ArrayList<Hotel> hotels = new ArrayList<>();

    public HotelCRUD() {
    	getContentPane().setBackground(Color.WHITE);
        initComponents();
        fetch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHotelName = new javax.swing.JTextField();
        jLabelName = new javax.swing.JLabel();
        jLabelDesc = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHotels = new javax.swing.JTable();
        tblHotels.setBackground(Color.WHITE);
        btnSave = new javax.swing.JButton();
        btnSave.setBackground(new Color(240, 230, 140));
        btnUpdate = new javax.swing.JButton();
        btnUpdate.setBackground(new Color(240, 230, 140));
        btnDelete1 = new javax.swing.JButton();
        btnDelete1.setBackground(new Color(240, 230, 140));
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HOTEL");

        jLabelName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelName.setText("Hotel Name");

        jLabelDesc.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelDesc.setText("Description");

        tblHotels.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
            		"Hotel ID","Name", "Type", "Description", "Rating", "Address", "Town", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHotels.setCellSelectionEnabled(true);
        tblHotels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHotelsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHotels);
        if (tblHotels.getColumnModel().getColumnCount() > 0) {
            tblHotels.getColumnModel().getColumn(2).setResizable(false);
        }

        btnSave.setText("Save");
        btnSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSave.setIconTextGap(0);
        btnSave.setInheritsPopupMenu(true);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete1.setText("Delete");
        btnDelete1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("HOTEL CRUD APPLICATION");
        
        String t1[] = { "Dog", "Cat","Cat and Dog"};       
        comboBox_Type = new JComboBox(t1);
        comboBox_Type.setBackground(new Color(240, 128, 128));
        
        lblType = new JLabel("Type");
        lblType.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        String r1[] = { "1", "2","3","4","5"}; 
        comboBox_Rating = new JComboBox(r1);
        comboBox_Rating.setBackground(new Color(255, 160, 122));
        
        lblRating = new JLabel("Rating");
        lblRating.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        textAddress = new JTextField();
        textAddress.setColumns(10);
        
        lblAddress = new JLabel("Address");
        lblAddress.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        textTown = new JTextField();
        textTown.setColumns(10);
        
        textCity = new JTextField();
        textCity.setColumns(10);
        
        lblTown = new JLabel("Town");
        lblTown.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        lblCity = new JLabel("City");
        lblCity.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        textHotelID = new JTextField();
        textHotelID.setColumns(10);
        
        lblHotelID = new JLabel("Hotel ID");
        lblHotelID.setFont(new Font("Verdana", Font.PLAIN, 12));
        
        btnBack = new JButton("Back");
        btnBack.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
				MenuAdminPage mp = new MenuAdminPage();
				mp.getFrame().setVisible(true);
				setVisible(false);	
        	}
        });
        btnBack.setBackground(new Color(240, 230, 140));
        btnBack.setFont(new Font("Verdana", Font.PLAIN, 13));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(242)
        					.addComponent(jLabel4))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addContainerGap(124, Short.MAX_VALUE)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lblRating, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        										.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        											.addComponent(lblType, GroupLayout.PREFERRED_SIZE, 77, GroupLayout.PREFERRED_SIZE)
        											.addComponent(jLabelDesc, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)))
        									.addPreferredGap(ComponentPlacement.RELATED))
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lblHotelID, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
        										.addComponent(jLabelName, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE))
        									.addGap(34)))
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(comboBox_Rating, 0, 200, Short.MAX_VALUE)
        								.addGroup(layout.createSequentialGroup()
        									.addComponent(comboBox_Type, 0, 200, Short.MAX_VALUE)
        									.addPreferredGap(ComponentPlacement.RELATED))
        								.addComponent(txtDescription, GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        										.addComponent(textHotelID, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        										.addComponent(txtHotelName, GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
        									.addPreferredGap(ComponentPlacement.RELATED)))
        							.addGap(107)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        								.addComponent(textTown, Alignment.LEADING)
        								.addComponent(textCity, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        								.addComponent(lblTown, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
        								.addComponent(lblCity, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
        								.addComponent(textAddress, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
        								.addComponent(lblAddress, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)))
        						.addGroup(layout.createSequentialGroup()
        							.addGap(133)
        							.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
        							.addGap(72)
        							.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
        							.addGap(61)
        							.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
        							.addGap(95)))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 778, GroupLayout.PREFERRED_SIZE)
        					.addGap(145)))
        			.addContainerGap())
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addContainerGap(1421, Short.MAX_VALUE)
        			.addComponent(btnBack)
        			.addGap(129))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        			.addGap(106)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(textHotelID, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblHotelID))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(20)
        					.addComponent(lblAddress)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(textAddress, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(lblTown)
        					.addGap(13)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(comboBox_Type, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        						.addComponent(lblType, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
        						.addComponent(textTown, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE))
        					.addGap(18))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(txtHotelName, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabelName, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
        					.addGap(88)))
        			.addGap(8)
        			.addComponent(lblCity)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtDescription, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabelDesc, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
        				.addComponent(textCity, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(comboBox_Rating, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblRating))
        			.addGap(148)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnDelete1, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(25, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(82)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 579, GroupLayout.PREFERRED_SIZE)
        			.addGap(28)
        			.addComponent(btnBack, GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
    	String hotel_id = textHotelID.getText().trim();
        String name = txtHotelName.getText().trim();
        String type=comboBox_Type.getEditor().getItem().toString();
        String descr = txtDescription.getText().trim();
        String rating=comboBox_Rating.getEditor().getItem().toString();
        String address = textAddress.getText().trim();
        String town = textTown.getText().trim();
        String city = textCity.getText().trim();
        
        
        if (!hotel_id.isEmpty() && !name.isEmpty() && !type.isEmpty() && !descr.isEmpty()&& !rating.isEmpty()&& !address.isEmpty() && !town.isEmpty() && !city.isEmpty()  ) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
                String sql = "select * from hotel where hotel_id='" + hotel_id + "'";
                st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if (!rs.first()) {
                    saveHotel(hotel_id,name,type,descr,rating,address,town,city);
                    DefaultTableModel model = (DefaultTableModel) tblHotels.getModel();
                    Object[] row = new Object[8];
                    row[0] = hotel_id;
                    row[1] = name;
                    row[2] = type; 
                    row[3] = descr; 
                    row[4] = rating; 
                    row[5] = address; 
                    row[6] = town; 
                    row[7] = city;
                    model.addRow(row);
                } else {
                    alert("Please provide a different id number", "Similar id found");
                }

                clear();
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    con.close();
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } //        else if (!id.matches("^[0-9]{8}$")) {
        //            alert("please provide a valid id number", "Wrong id");
        //        } 
        else {
            alert("please fill in all the details");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    	String hotel_id = textHotelID.getText().trim();
        String name = txtHotelName.getText().trim();
        String type=comboBox_Type.getEditor().getItem().toString();
        String descr = txtDescription.getText().trim();
        String rating=comboBox_Rating.getEditor().getItem().toString();
        String address = textAddress.getText().trim();
        String town = textTown.getText().trim();
        String city = textCity.getText().trim();
        
        if (!hotel_id.isEmpty() && !name.isEmpty() && !type.isEmpty() && !descr.isEmpty()&& !rating.isEmpty()&& !address.isEmpty() && !town.isEmpty() && !city.isEmpty()  ) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
                String sql = "select * from hotel where hotel_id='" + hotel_id + "'";
                st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if (rs.first()) {
                    update(hotel_id,name,type,descr,rating,address,town,city);
                    DefaultTableModel model = (DefaultTableModel) tblHotels.getModel();
                    model.setRowCount(0);                   
                    fetch();
                    alert("Update was successful");
                    
                } else {
                    alert("There is no such hotel", "Update error");
                    clear();
                }

            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            alert("There is nothing to update :(","No row selected");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    //set the values of a row to the textfields
    private void tblHotelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHotelsMouseClicked
        // TODO add your handling code here:
        int i = tblHotels.getSelectedRow();
        TableModel model = tblHotels.getModel();
        textHotelID.setText(model.getValueAt(i, 0).toString());
        txtHotelName.setText(model.getValueAt(i, 1).toString());
        comboBox_Type.getEditor().setItem(model.getValueAt(i, 2).toString());
        txtDescription.setText(model.getValueAt(i, 3).toString());
        comboBox_Type.getEditor().setItem(model.getValueAt(i, 4).toString());
        textAddress.setText(model.getValueAt(i, 5).toString());
        textTown.setText(model.getValueAt(i, 6).toString());
        textCity.setText(model.getValueAt(i, 7).toString());
    }//GEN-LAST:event_tblHotelsMouseClicked

    //handles delete button action
    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        int i = tblHotels.getSelectedRow();
        if (i >= 0) {
            int option = JOptionPane.showConfirmDialog(rootPane,
                    "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
            if (option == 0) {
                TableModel model = tblHotels.getModel();

                String id = model.getValueAt(i, 0).toString();
                if (tblHotels.getSelectedRows().length == 1) {
                    delete(id);
                    DefaultTableModel model1 = (DefaultTableModel) tblHotels.getModel();
                    model1.setRowCount(0);
                    fetch();
                    clear();
                }
            }
        } else {
            alert("Please select a row to delete");
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }
  
    //method to save hotel to the db
    public void saveHotel(String hotel_id, String name, String type,String descr,String rating,String address,String town,String city) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
            String sql = "INSERT INTO `hotel`(`hotel_id`, `name`, `type`,`descr`, `rating`, `address`,`town`, `city`) "
                    + "VALUES ('" + hotel_id + "','" + name + "','" + type + "','" + descr + "','" + rating + "','" + address + "','" + town + "','" + city + "')";
            st = con.createStatement();
            st.execute(sql);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
//        fetch();
    }

    //update the db
    public void update(String hotel_id, String name, String type,String descr,String rating,String address,String town,String city) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
            String sql = "UPDATE `hotel`SET name='" + name + "',type='" + type + "',descr='" + descr + "',rating='" + rating + "',address='" + address + 
            		                     "',town='" + town + "',city='" + city + "'WHERE hotel_id='" + hotel_id + "'";
            st = con.createStatement();
            st.execute(sql);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
//        fetch();
    }

    //delete details in the db
    public void delete(String id) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
            String sql = "DELETE FROM `hotel` WHERE hotel_id='" + id + "'";
            st = con.createStatement();
            st.execute(sql);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
//        fetch();
    }

    //method to clear the txt fields
    private void clear() {
        textHotelID.setText("");
        txtHotelName.setText("");
        comboBox_Type.getEditor().setItem("");
        txtDescription.setText("");
        comboBox_Rating.getEditor().setItem("");
        textAddress.setText("");
        textTown.setText("");
        textCity.setText("");
    }

    //fetch 
    public  void fetch() {
        hotels.clear();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_hotel", "root", "");
            String sql = "select * from hotel";
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
            	Address address=new Address(rs.getString("address"), rs.getString("town"), rs.getString("city"));
                Hotel hotel = new Hotel(Integer.parseInt(rs.getString("hotel_id")), rs.getString("name"), rs.getString("type"),rs.getString("descr"), 
                		Integer.parseInt(rs.getString("rating")),address);
                hotels.add(hotel);
            }
            DefaultTableModel model = (DefaultTableModel) tblHotels.getModel();
            for (Hotel hotel : hotels) {

                Object[] row = new Object[8];
                row[0] = hotel.getHotel_id();
                row[1] = hotel.getHotel_name();
                row[2] = hotel.getHotel_type();
                row[3] = hotel.getHotel_description();
                row[4] = hotel.getHotel_rating();
                row[5] = hotel.getHotel_address().getAddress();
                row[6] = hotel.getHotel_address().getTown();
                row[7] = hotel.getHotel_address().getCity();

                model.addRow(row);
            }

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(HotelCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HotelCRUD().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelDesc;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHotels;
    private javax.swing.JTextField txtHotelName;
    private javax.swing.JTextField txtDescription;
    private JComboBox comboBox_Rating;
    private JComboBox comboBox_Type;
    private JLabel lblRating;
    private JTextField textAddress;
    private JLabel lblAddress;
    private JTextField textTown;
    private JTextField textCity;
    private JLabel lblTown;
    private JLabel lblCity;
    private JLabel lblType;
    private JTextField textHotelID;
    private JLabel lblHotelID;
    private JButton btnBack;
}
